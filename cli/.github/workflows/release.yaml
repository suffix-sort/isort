name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            ext: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: zip
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Add required targets
        run: |
          rustup target add x86_64-unknown-linux-musl || true
          rustup target add x86_64-apple-darwin || true
          rustup target add x86_64-pc-windows-gnu || true

      # Install musl tools for linking
      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools musl-dev

      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: choco install -y 7zip

      # Build binaries
      - name: Build release binary (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo build --release

      - name: Build release binary (Linux/Windows)
        if: matrix.os != 'macos-latest'
        run: cargo build --release --target ${{ matrix.target }}

      # Strip binaries (Unix)
      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          BINARY_PATH=""
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            BINARY_PATH="target/release/ssort"
          else
            BINARY_PATH="target/${{ matrix.target }}/release/ssort"
          fi
          strip "$BINARY_PATH" || true

      # Compress binaries
      - name: Compress binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $BINARY_PATH = "target/${{ matrix.target }}/release/ssort.exe"
          if (Test-Path $BINARY_PATH) {
              7z a "ssort-${{ matrix.target }}.zip" $BINARY_PATH
          } else {
              Write-Error "Error: ssort.exe not found!"
              exit 1
          }

      - name: Compress binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/ssort"
          if [ -f "$BINARY_PATH" ]; then
              tar czf "ssort-${{ matrix.target }}.tar.gz" -C "target/${{ matrix.target }}/release" ssort
          else
              echo "Error: ssort binary not found!"
              exit 1
          fi

      - name: Compress binary (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          BINARY_PATH="target/release/ssort"
          if [ -f "$BINARY_PATH" ]; then
              tar czf "ssort-${{ matrix.target }}.tar.gz" -C "target/release" ssort
          else
              echo "Error: ssort binary not found!"
              exit 1
          fi

      # Generate checksums
      - name: Generate checksum (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $FILE = "ssort-${{ matrix.target }}.zip"
          certutil -hashfile $FILE SHA256 | findstr /v "CertUtil" | findstr /v "hashfile" > "${FILE}.sha256"

      - name: Generate checksum (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "ssort-${{ matrix.target }}.tar.gz" > "ssort-${{ matrix.target }}.tar.gz.sha256"
          else
              shasum -a 256 "ssort-${{ matrix.target }}.tar.gz" > "ssort-${{ matrix.target }}.tar.gz.sha256"
          fi

      - name: Generate checksum (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "ssort-${{ matrix.target }}.tar.gz" > "ssort-${{ matrix.target }}.tar.gz.sha256"
          else
              shasum -a 256 "ssort-${{ matrix.target }}.tar.gz" > "ssort-${{ matrix.target }}.tar.gz.sha256"
          fi

      # Upload artifact per target (directory)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssort-${{ matrix.target }}
          path: |
            ssort-${{ matrix.target }}.${{ matrix.ext }}
            ssort-${{ matrix.target }}.${{ matrix.ext }}.sha256

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          flatten: false  # keep per-target directories temporarily

      - name: Flatten all files
        run: |
          mkdir -p artifacts_flat
          find artifacts -type f -exec mv {} artifacts_flat/ \;

      - name: List files for debugging
        run: ls -l artifacts_flat

      - name: Create release and upload assets
        id: create_release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: ${{ github.ref_name }}
          name: ssort ${{ github.ref_name }}
          draft: false
          prerelease: false
          artifacts: "artifacts_flat/*"
          allowUpdates: true
          artifactErrorsFailBuild: true
          generateReleaseNotes: true

